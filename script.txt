function recur(n) {
    return n > 1 ? recur(n-1) + recur(n-2) : n;
}

const begin = clock();
print(recur(30));
print("\nusing time = ", clock() - begin);



/*
import stdlib
import stdio
meta(expression) 
{ 
	contents
}
If expression is true, the compiler puts the content into the source code.
meta += (macro`name) (macro`value)
meta -= (macro`name) 

meta(!CALCUL) 
{
	meta += CALCUL(LIST) // declare macro function 'CALCUL'
	{
		LIST(ADD, +)
		LIST(SUB, -)
		LIST(MUL, *)
		LIST(DIV, /)
	}
	meta += 3 // error already declared 'CALCUL'
}


meta += TRUE 	1
meta += FALSE 	0
meta += ENUM(a, b) a,
meta += LIST(a, b) (SomeGenericClass<Type>(Type c, Type d) => c b d),
meta += ATTACH(a, b) a##b
meta += _DEBUG TRUE

SomeGenericClass<Type>(Type, Type)[enum{CALCUL(ENUM)}] temp = [CALCUL(LIST)];
meta -= ENUM, LIST, CALCUL, ATTACH

float[1000] memory = [0, 0.1, .. 1]
int[1000] memory = [1..];

class money<Type>
{
	Type a;
	integer<1024> amount
	money<Type> operator+(money a) => amount + a
	money operator-(money a) => amount - a
	money operator*(money a) => amount * a
	money operator/(money a) => amount / a
	money operator+=(money a) => amount += a.amount, self
}

int(int,int) fp = int(int a, int b) => a + b
int sum(int a, int b) => a + b


return int(int start, int end)
{
	int temp
	loop (n = start..end) match (n % 2)
	{
		(0) => continue
		(1) => temp += n		
	}
	return temp
}(1, 100)
*/